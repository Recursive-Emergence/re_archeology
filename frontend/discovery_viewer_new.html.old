<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Windmill Discovery Viewer</title>
    
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    
    <!-- Material Design Icons -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    
    <!-- Status Enhancement Styles -->
    <link rel="stylesheet" href="css/status-enhancements.css">
    
    <!-- Custom CSS -->
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #1a1a1a;
            color: #ffffff;
            overflow: hidden;
        }
        
        .app-container {
            display: flex;
            height: 100vh;
        }
        
        .sidebar {
            width: 320px;
            min-width: 280px;
            background: #2d2d2d;
            border-right: 1px solid #404040;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        
        .sidebar-header {
            padding: 20px;
            border-bottom: 1px solid #404040;
            background: #252525;
        }
        
        .sidebar-header h1 {
            font-size: 20px;
            margin-bottom: 8px;
            color: #00ff88;
        }
        
        .sidebar-header p {
            color: #aaa;
            font-size: 14px;
        }
        
        .controls-section {
            padding: 16px;
            flex: 1;
            overflow-y: auto;
            scrollbar-width: thin;
            scrollbar-color: #404040 #1a1a1a;
        }
        
        .controls-section::-webkit-scrollbar {
            width: 6px;
        }
        
        .controls-section::-webkit-scrollbar-track {
            background: #1a1a1a;
        }
        
        .controls-section::-webkit-scrollbar-thumb {
            background: #404040;
            border-radius: 3px;
        }
        
        .control-group {
            margin-bottom: 20px;
            background: #1f1f1f;
            border-radius: 6px;
            padding: 12px;
            border: 1px solid #353535;
        }
        
        .control-group h3 {
            font-size: 14px;
            color: #00ff88;
            margin-bottom: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .input-group {
            margin-bottom: 12px;
        }
        
        .input-group label {
            display: block;
            font-size: 12px;
            color: #ccc;
            margin-bottom: 4px;
        }
        
        .input-group input,
        .input-group select {
            width: 100%;
            padding: 8px 12px;
            background: #1a1a1a;
            border: 1px solid #404040;
            border-radius: 4px;
            color: #fff;
            font-size: 14px;
        }
        
        .input-group input:focus,
        .input-group select:focus {
            outline: none;
            border-color: #00ff88;
        }
        
        .btn {
            padding: 8px 14px;
            background: #00ff88;
            color: #000;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
            font-size: 12px;
            transition: all 0.2s;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .button-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 8px;
        }
        
        .button-grid .btn:first-child {
            grid-column: 1 / -1;
        }
        
        .btn:hover {
            background: #00cc6a;
            transform: translateY(-1px);
        }
        
        .btn:disabled {
            background: #404040;
            color: #666;
            cursor: not-allowed;
            transform: none;
        }
        
        .btn-secondary {
            background: #404040;
            color: #fff;
        }
        
        .btn-secondary:hover {
            background: #4a4a4a;
        }
        
        .btn-stop {
            background: #ff4444;
            color: #fff;
        }
        
        .btn-stop:hover {
            background: #cc3333;
        }
        
        .status-section {
            padding: 16px 20px;
            background: #252525;
            border-top: 1px solid #404040;
        }
        
        .status-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            font-size: 14px;
        }
        
        .status-value {
            color: #00ff88;
            font-weight: 600;
        }
        
        .map-container {
            flex: 1;
            position: relative;
        }
        
        #map {
            height: 100%;
            width: 100%;
        }
        
        .patch-hover-info {
            position: absolute;
            background: rgba(0, 0, 0, 0.9);
            color: #fff;
            padding: 12px;
            border-radius: 8px;
            border: 1px solid #00ff88;
            pointer-events: none;
            z-index: 1000;
            font-size: 12px;
            min-width: 200px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
        }
        
        .patch-hover-info h4 {
            margin-bottom: 8px;
            color: #00ff88;
            font-size: 14px;
        }
        
        .patch-hover-info .info-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 4px;
        }
        
        .patch-hover-info .info-value {
            color: #ccc;
            font-weight: 600;
        }
        
        .legend {
            position: absolute;
            bottom: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.8);
            padding: 16px;
            border-radius: 8px;
            border: 1px solid #404040;
            z-index: 1000;
        }
        
        .legend h4 {
            margin-bottom: 12px;
            color: #00ff88;
            font-size: 14px;
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
            font-size: 12px;
        }
        
        .legend-color {
            width: 16px;
            height: 16px;
            border-radius: 2px;
            margin-right: 8px;
            border: 1px solid #666;
        }
        
        .progress-overlay {
            position: absolute;
            top: 20px;
            left: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.95);
            padding: 20px;
            border-radius: 12px;
            border: 2px solid #00ff88;
            z-index: 1001;
            text-align: center;
            display: none;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
        }
        
        .progress-bar {
            width: 100%;
            height: 8px;
            background: #404040;
            border-radius: 4px;
            margin: 16px 0;
            overflow: hidden;
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.3);
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #00ff88, #00cc6a, #00ff88);
            background-size: 200% 100%;
            width: 0%;
            transition: width 0.3s ease;
            animation: progress-shimmer 2s infinite;
        }
        
        @keyframes progress-shimmer {
            0% { background-position: 200% 0; }
            100% { background-position: -200% 0; }
        }
        
        .patch-grid {
            display: none;
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(0, 0, 0, 0.9);
            border: 1px solid #404040;
            border-radius: 8px;
            padding: 16px;
            z-index: 999;
            max-width: 300px;
        }
        
        .patch-grid h4 {
            color: #00ff88;
            margin-bottom: 12px;
            font-size: 14px;
        }
        
        .elevation-grid {
            display: grid;
            grid-template-columns: repeat(8, 1fr);
            gap: 1px;
            border: 1px solid #404040;
        }
        
        .elevation-cell {
            aspect-ratio: 1;
            font-size: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #000;
            font-weight: bold;
        }
        
        .scan-animation {
            position: absolute;
            border: 2px solid #00ff88;
            border-radius: 50%;
            pointer-events: none;
            z-index: 998;
            animation: scanPulse 2s infinite;
        }
        
        @keyframes scanPulse {
            0% {
                transform: scale(1);
                opacity: 1;
            }
            100% {
                transform: scale(2);
                opacity: 0;
            }
        }
        
        .connection-status {
            position: absolute;
            top: 15px;
            right: 15px;
            padding: 6px 10px;
            border-radius: 16px;
            font-size: 11px;
            z-index: 1200;
            display: flex;
            align-items: center;
            gap: 6px;
            backdrop-filter: blur(10px);
            font-weight: 600;
        }
        
        .connection-status.connected {
            background: rgba(0, 255, 136, 0.25);
            border: 1px solid #00ff88;
            color: #00ff88;
            box-shadow: 0 0 15px rgba(0, 255, 136, 0.3);
        }
        
        .connection-status.disconnected {
            background: rgba(255, 68, 68, 0.25);
            border: 1px solid #ff4444;
            color: #ff4444;
            box-shadow: 0 0 15px rgba(255, 68, 68, 0.3);
        }
        
        .connection-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: currentColor;
        }
        
        .toast {
            position: absolute;
            top: 80px;
            right: 20px;
            background: rgba(0, 0, 0, 0.9);
            color: #fff;
            padding: 12px 16px;
            border-radius: 8px;
            border-left: 4px solid #00ff88;
            z-index: 1002;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            max-width: 300px;
        }
        
        .toast.show {
            transform: translateX(0);
        }
        
        .toast.error {
            border-left-color: #ff4444;
        }
        
        .toast.warning {
            border-left-color: #ffaa00;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h1>🏛️ Windmill Discovery</h1>
                <p>Real-time structure detection using φ⁰-ψ⁰ resonance analysis</p>
            </div>
            
            <div class="controls-section">
                <!-- Region Selection -->
                <div class="control-group">
                    <h3>🗺️ Scan Region</h3>
                    <div class="input-group">
                        <label>Center Latitude</label>
                        <input type="number" id="centerLat" value="52.4751" step="0.0001" min="-90" max="90">
                    </div>
                    <div class="input-group">
                        <label>Center Longitude</label>
                        <input type="number" id="centerLon" value="4.8156" step="0.0001" min="-180" max="180">
                    </div>
                    <div class="input-group">
                        <label>Scan Radius (km)</label>
                        <input type="number" id="scanRadius" value="2" step="0.5" min="0.5" max="10">
                    </div>
                    <div class="input-group">
                        <label>Patch Size (m)</label>
                        <select id="patchSize">
                            <option value="40" selected>40m × 40m</option>
                            <option value="60">60m × 60m</option>
                            <option value="80">80m × 80m</option>
                        </select>
                    </div>
                </div>
                
                <!-- Detection Parameters -->
                <div class="control-group">
                    <h3>🎯 Detection Settings</h3>
                    <div class="input-group">
                        <label>φ⁰ Threshold</label>
                        <input type="number" id="phi0Threshold" value="0.35" step="0.05" min="0" max="1">
                    </div>
                    <div class="input-group">
                        <label>ψ⁰ Threshold</label>
                        <input type="number" id="psi0Threshold" value="0.4" step="0.05" min="0" max="1">
                    </div>
                    <div class="input-group">
                        <label>Detection Mode</label>
                        <select id="detectionMode">
                            <option value="windmill" selected>Windmill Structures</option>
                            <option value="tower">Tower Structures</option>
                            <option value="mound">Archaeological Mounds</option>
                            <option value="generic">Generic Structures</option>
                        </select>
                    </div>
                </div>
                
                <!-- Action Buttons -->
                <div class="control-group">
                    <h3>🚀 Actions</h3>
                    <div class="button-grid">
                        <button class="btn btn-primary" id="startScanBtn">Start Scan</button>
                        <button class="btn btn-stop" id="stopScanBtn" disabled>Stop</button>
                        <button class="btn btn-secondary" id="clearResultsBtn">Clear</button>
                    </div>
                </div>
                
                <!-- Visualization Options -->
                <div class="control-group">
                    <h3>👁️ Visualization</h3>
                    <div class="input-group">
                        <label>
                            <input type="checkbox" id="showElevation" checked> Show elevation data
                        </label>
                    </div>
                    <div class="input-group">
                        <label>
                            <input type="checkbox" id="showConfidence" checked> Color by confidence
                        </label>
                    </div>
                    <div class="input-group">
                        <label>
                            <input type="checkbox" id="showScanAnimation"> Show scan animation
                        </label>
                    </div>
                </div>
            </div>
            
            <!-- Status -->
            <div class="status-section">
                <div class="status-item">
                    <span>Session:</span>
                    <span class="status-value" id="sessionStatus">Idle</span>
                </div>
                <div class="status-item">
                    <span>Processed:</span>
                    <span class="status-value" id="processedPatches">0</span>
                </div>
                <div class="status-item">
                    <span>Detections:</span>
                    <span class="status-value" id="totalDetections">0</span>
                </div>
                <div class="status-item">
                    <span>High Confidence:</span>
                    <span class="status-value" id="highConfidenceDetections">0</span>
                </div>
                <div class="status-item">
                    <span>Kernel Status:</span>
                    <span class="status-value" id="kernelStatus">Unknown</span>
                </div>
            </div>
            
            <!-- Kernel Management Section -->
            <div class="status-section">
                <div style="margin-bottom: 12px;">
                    <h4 style="color: #ccc; font-size: 14px; margin-bottom: 8px;">Kernel Management</h4>
                </div>
                <div class="button-grid">
                    <button class="btn btn-secondary" id="listKernelsBtn" style="font-size: 11px;">
                        <i class="material-icons" style="font-size: 14px; margin-right: 4px;">storage</i>
                        List Cached Kernels
                    </button>
                    <button class="btn btn-secondary" id="forceRetrainBtn" style="font-size: 11px;">
                        <i class="material-icons" style="font-size: 14px; margin-right: 4px;">refresh</i>
                        Force Retrain
                    </button>
                    <button class="btn btn-secondary" id="clearKernelsBtn" style="font-size: 11px;">
                        <i class="material-icons" style="font-size: 14px; margin-right: 4px;">delete</i>
                        Clear Cache
                    </button>
                </div>
                <div id="kernelInfo" style="margin-top: 8px; font-size: 12px; color: #999; display: none;"></div>
            </div>
        </div>
        
        <!-- Map Container -->
        <div class="map-container">
            <div id="map"></div>
            
            <!-- Connection Status -->
            <div class="connection-status disconnected" id="connectionStatus">
                <div class="connection-dot"></div>
                <span>Disconnected</span>
            </div>
            
            <!-- Progress Overlay -->
            <div class="progress-overlay" id="progressOverlay">
                <div id="progressText">Initializing scan...</div>
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill"></div>
                </div>
                <div id="progressDetails">Preparing detection algorithms...</div>
            </div>
            
            <!-- Patch Hover Info -->
            <div class="patch-hover-info" id="patchHoverInfo" style="display: none;">
                <h4 id="hoverTitle">Patch Information</h4>
                <div class="info-row">
                    <span>Location:</span>
                    <span class="info-value" id="hoverLocation">--</span>
                </div>
                <div class="info-row">
                    <span>φ⁰ Score:</span>
                    <span class="info-value" id="hoverPhi0">--</span>
                </div>
                <div class="info-row">
                    <span>ψ⁰ Score:</span>
                    <span class="info-value" id="hoverPsi0">--</span>
                </div>
                <div class="info-row">
                    <span>Confidence:</span>
                    <span class="info-value" id="hoverConfidence">--</span>
                </div>
                <div class="info-row">
                    <span>Elevation Range:</span>
                    <span class="info-value" id="hoverElevationRange">--</span>
                </div>
                <div class="info-row">
                    <span>Structure Type:</span>
                    <span class="info-value" id="hoverStructureType">--</span>
                </div>
            </div>
            
            <!-- Elevation Grid Display -->
            <div class="patch-grid" id="patchGrid">
                <h4>Elevation Data (m)</h4>
                <div class="elevation-grid" id="elevationGrid"></div>
            </div>
            
            <!-- Legend -->
            <div class="legend">
                <h4>Detection Results</h4>
                <div class="legend-item">
                    <div class="legend-color" style="background: #ff4444;"></div>
                    <span>High Confidence (>80%)</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: #ffaa00;"></div>
                    <span>Medium Confidence (60-80%)</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: #ffff00;"></div>
                    <span>Low Confidence (40-60%)</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: #666666;"></div>
                    <span>No Detection (<40%)</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: #00ff88;"></div>
                    <span>Currently Scanning</span>
                </div>
            </div>
            
            <!-- Toast Notifications -->
            <div class="toast" id="toast">
                <div id="toastMessage"></div>
            </div>
        </div>
    </div>
    
    <!-- Leaflet JavaScript -->
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    
    <!-- Discovery API -->
    <script src="js/discovery-api.js"></script>
    <!-- Enhanced Status Management -->
    <script src="js/status-manager.js"></script>
    <script src="js/status-ui-manager.js"></script>
    
    <script>
        class WindmillDiscoveryApp {
            constructor() {
                // Initialize enhanced status management
                this.statusManager = new StatusManager();
                this.statusUI = new StatusUIManager(this.statusManager);
                
                // Legacy API for backward compatibility
                this.api = {
                    isConnected: () => this.statusManager.isConnected(),
                    connectWebSocket: () => this.statusManager.connect(),
                    startDiscovery: (config) => this.statusManager.startDiscovery(config),
                    stopDiscovery: (sessionId) => this.statusManager.stopDiscovery(sessionId),
                    disconnect: () => this.statusManager.disconnect()
                };
                
                this.map = null;
                this.isScanning = false;
                this.currentSession = null;
                this.patches = new Map();
                this.currentScanAnimation = null;
                this.scanAreaCircle = null;
                
                // Make status UI globally accessible
                window.statusUI = this.statusUI;
                
                this.initializeApp();
            }
            
            async initializeApp() {
                this.initMap();
                this.bindEvents();
                
                // Setup enhanced status management event handlers
                this.setupEnhancedStatusHandlers();
                
                // Try to connect to WebSocket with enhanced reliability
                try {
                    await this.statusManager.connect();
                    console.log('✅ Enhanced status management initialized successfully');
                } catch (error) {
                    console.warn('⚠️ Running in offline mode:', error.message);
                    this.setupOfflineMode();
                }
            }
            
            setupEnhancedStatusHandlers() {
                // Session management
                this.statusManager.on('sessionStarted', (session) => {
                    this.currentSession = session;
                    this.isScanning = true;
                });
                
                this.statusManager.on('sessionCompleted', (session) => {
                    this.isScanning = false;
                    this.currentSession = null;
                });
                
                this.statusManager.on('sessionStopped', () => {
                    this.isScanning = false;
                    this.currentSession = null;
                });
                
                // Patch updates
                this.statusManager.on('patchResult', (patch) => {
                    this.handlePatchUpdate(patch);
                });
                
                this.statusManager.on('patchScanning', (data) => {
                    if (document.getElementById('showScanAnimation').checked) {
                        this.showScanAnimation(data.lat, data.lon);
                    }
                });
                
                // Error handling
                this.statusManager.on('error', (error) => {
                    console.error('Discovery error:', error);
                });
                
                // Connection state
                this.statusManager.on('connectionEstablished', () => {
                    document.getElementById('startScanBtn').disabled = false;
                });
                
                this.statusManager.on('disconnected', () => {
                    this.isScanning = false;
                    this.currentSession = null;
                    document.getElementById('startScanBtn').disabled = true;
                    document.getElementById('stopScanBtn').disabled = true;
                });
                
                // Kernel status handling
                this.statusManager.on('kernelReady', (data) => {
                    this.handleKernelStatus(data);
                });
            }
            
            /**
             * Handle kernel status updates
             */
            handleKernelStatus(data) {
                const kernelStatusEl = document.getElementById('kernelStatus');
                const kernelInfoEl = document.getElementById('kernelInfo');
                
                if (data.was_cached) {
                    kernelStatusEl.textContent = 'Loaded from cache';
                    kernelStatusEl.style.color = '#00ff88';
                    
                    if (data.kernel_info) {
                        kernelInfoEl.innerHTML = `
                            <div>📦 Hash: ${data.kernel_info.hash?.substring(0, 8)}...</div>
                            <div>📅 Created: ${new Date(data.kernel_info.created_at).toLocaleDateString()}</div>
                            <div>🏗️ Structure: ${data.kernel_info.structure_type}</div>
                        `;
                        kernelInfoEl.style.display = 'block';
                    }
                } else {
                    kernelStatusEl.textContent = 'Newly trained';
                    kernelStatusEl.style.color = '#ffaa00';
                    
                    if (data.kernel_info) {
                        kernelInfoEl.innerHTML = `
                            <div>🆕 Fresh kernel trained</div>
                            <div>🏗️ Structure: ${data.kernel_info.structure_type}</div>
                            <div>📊 Trained on ${data.kernel_info.num_patches || 'N/A'} patches</div>
                        `;
                        kernelInfoEl.style.display = 'block';
                    }
                }
            }
            
            initMap() {
                // Initialize the map
                this.map = L.map('map').setView([52.4751, 4.8156], 13);
                
                // Add base layer
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '© OpenStreetMap contributors'
                }).addTo(this.map);
                
                // Add click handler for setting scan center
                this.map.on('click', (e) => {
                    if (!this.isScanning) {
                        document.getElementById('centerLat').value = e.latlng.lat.toFixed(6);
                        document.getElementById('centerLon').value = e.latlng.lng.toFixed(6);
                        this.updateScanArea();
                    }
                });
                
                // Add scan area circle
                this.scanAreaCircle = L.circle([52.4751, 4.8156], {
                    color: '#00ff88',
                    fillColor: '#00ff88',
                    fillOpacity: 0.1,
                    radius: 2000
                }).addTo(this.map);
                
                this.updateScanArea();
            }
            
            setupOfflineMode() {
                // Disable features that require WebSocket connection
                document.getElementById('startScanBtn').disabled = true;
                document.getElementById('stopScanBtn').disabled = true;
                
                // Show offline status
                document.getElementById('sessionStatus').textContent = 'Offline Mode';
                
                // Add demo data for UI testing
                this.addDemoPatches();
            }
            
            addDemoPatches() {
                // Add some demo patches for visualization testing
                const demoPatches = [
                    {
                        patch_id: 'demo_1',
                        lat: 52.4751,
                        lon: 4.8156,
                        confidence: 0.85,
                        is_positive: true,
                        visualization_data: {
                            stats: { min: 0, max: 10, mean: 5, std: 2 }
                        }
                    },
                    {
                        patch_id: 'demo_2', 
                        lat: 52.4761,
                        lon: 4.8166,
                        confidence: 0.65,
                        is_positive: true,
                        visualization_data: {
                            stats: { min: 0, max: 8, mean: 4, std: 1.5 }
                        }
                    }
                ];
                
                demoPatches.forEach(patch => {
                    this.patches.set(patch.patch_id, patch);
                    this.addPatchToMap(patch);
                });
            }
            
            addPatchToMap(patch) {
                const color = this.getPatchColor(patch);
                const bounds = this.getPatchBounds(patch);
                
                const rectangle = L.rectangle(bounds, {
                    color: color,
                    weight: 1,
                    fillColor: color,
                    fillOpacity: patch.is_positive ? 0.7 : 0.3
                }).addTo(this.map);
                
                // Add hover events
                rectangle.on('mouseover', (e) => {
                    this.showPatchHover(e, patch);
                });
                
                rectangle.on('mouseout', () => {
                    this.hidePatchHover();
                });
                
                rectangle.on('click', () => {
                    this.showPatchDetails(patch);
                });
                
                patch.mapElement = rectangle;
            }
            
            getPatchColor(patch) {
                if (!patch.is_positive) {
                    return '#666666';
                }
                
                if (document.getElementById('showConfidence').checked) {
                    const confidence = patch.confidence || 0;
                    if (confidence >= 0.8) return '#ff4444';
                    if (confidence >= 0.6) return '#ffaa00';
                    if (confidence >= 0.4) return '#ffff00';
                    return '#666666';
                } else {
                    return patch.is_positive ? '#00ff88' : '#666666';
                }
            }
            
            getPatchBounds(patch) {
                const patchSize = parseInt(document.getElementById('patchSize').value);
                const halfSize = patchSize / 2;
                
                // Convert meters to degrees (rough approximation)
                const latDelta = halfSize / 111000;
                const lonDelta = halfSize / (111000 * Math.cos(patch.lat * Math.PI / 180));
                
                return [
                    [patch.lat - latDelta, patch.lon - lonDelta],
                    [patch.lat + latDelta, patch.lon + lonDelta]
                ];
            }
            
            showPatchHover(e, patch) {
                const info = document.getElementById('patchHoverInfo');
                const mousePos = e.originalEvent;
                
                // Update hover content
                document.getElementById('hoverLocation').textContent = 
                    `${patch.lat.toFixed(6)}, ${patch.lon.toFixed(6)}`;
                document.getElementById('hoverPhi0').textContent = 
                    patch.detection_result?.phi0?.toFixed(3) || '--';
                document.getElementById('hoverPsi0').textContent = 
                    patch.detection_result?.psi0?.toFixed(3) || '--';
                document.getElementById('hoverConfidence').textContent = 
                    `${(patch.confidence * 100).toFixed(1)}%`;
                document.getElementById('hoverElevationRange').textContent = 
                    `${patch.elevation_stats.min.toFixed(1)}m - ${patch.elevation_stats.max.toFixed(1)}m`;
                document.getElementById('hoverStructureType').textContent = 
                    patch.detection_result?.structure_type || 'Unknown';
                
                // Position and show
                info.style.left = `${mousePos.clientX + 10}px`;
                info.style.top = `${mousePos.clientY - 10}px`;
                info.style.display = 'block';
            }
            
            hidePatchHover() {
                document.getElementById('patchHoverInfo').style.display = 'none';
            }
            
            showPatchDetails(patch) {
                // Show detailed elevation grid
                this.displayElevationGrid(patch);
            }
            
            displayElevationGrid(patch) {
                const grid = document.getElementById('elevationGrid');
                const container = document.getElementById('patchGrid');
                
                grid.innerHTML = '';
                
                if (!patch.elevation_data || !Array.isArray(patch.elevation_data)) {
                    container.style.display = 'none';
                    return;
                }
                
                const data = patch.elevation_data;
                const rows = data.length;
                const cols = data[0]?.length || 0;
                
                if (rows === 0 || cols === 0) {
                    container.style.display = 'none';
                    return;
                }
                
                grid.style.gridTemplateColumns = `repeat(${Math.min(cols, 12)}, 1fr)`;
                
                const min = patch.elevation_stats.min;
                const max = patch.elevation_stats.max;
                const range = max - min;
                
                for (let i = 0; i < Math.min(rows, 12); i++) {
                    for (let j = 0; j < Math.min(cols, 12); j++) {
                        const value = data[i][j];
                        const normalized = range > 0 ? (value - min) / range : 0;
                        
                        const cell = document.createElement('div');
                        cell.className = 'elevation-cell';
                        cell.textContent = value.toFixed(1);
                        cell.style.backgroundColor = this.getElevationColor(normalized);
                        cell.title = `${value.toFixed(2)}m`;
                        
                        grid.appendChild(cell);
                    }
                }
                
                container.style.display = 'block';
            }
            
            getElevationColor(normalized) {
                const r = Math.floor(normalized * 255);
                const g = Math.floor((1 - normalized) * 255);
                const b = 100;
                return `rgb(${r}, ${g}, ${b})`;
            }
            
            showScanAnimation(lat, lon) {
                if (this.currentScanAnimation) {
                    this.map.removeLayer(this.currentScanAnimation);
                }
                
                this.currentScanAnimation = L.circle([lat, lon], {
                    color: '#00ff88',
                    fillColor: 'transparent',
                    radius: 50,
                    className: 'scan-animation'
                }).addTo(this.map);
                
                setTimeout(() => {
                    if (this.currentScanAnimation) {
                        this.map.removeLayer(this.currentScanAnimation);
                        this.currentScanAnimation = null;
                    }
                }, 2000);
            }
            
            updateScanArea() {
                const lat = parseFloat(document.getElementById('centerLat').value);
                const lon = parseFloat(document.getElementById('centerLon').value);
                const radius = parseFloat(document.getElementById('scanRadius').value) * 1000;
                
                this.scanAreaCircle.setLatLng([lat, lon]);
                this.scanAreaCircle.setRadius(radius);
                this.map.setView([lat, lon], this.map.getZoom());
            }
            
            async startScan() {
                if (this.isScanning || !this.statusManager.isConnected()) {
                    return;
                }
                
                const config = {
                    center_lat: parseFloat(document.getElementById('centerLat').value),
                    center_lon: parseFloat(document.getElementById('centerLon').value),
                    scan_radius_km: parseFloat(document.getElementById('scanRadius').value),
                    patch_size_m: parseInt(document.getElementById('patchSize').value),
                    phi0_threshold: parseFloat(document.getElementById('phi0Threshold').value),
                    psi0_threshold: parseFloat(document.getElementById('psi0Threshold').value),
                    detection_mode: document.getElementById('detectionMode').value
                };
                
                try {
                    await this.statusManager.startDiscovery(config);
                } catch (error) {
                    console.error('Failed to start scan:', error);
                }
            }
            
            async stopScan() {
                if (!this.statusManager.isConnected()) {
                    return;
                }
                
                try {
                    await this.statusManager.stopDiscovery(this.currentSession?.session_id);
                } catch (error) {
                    console.error('Failed to stop scan:', error);
                }
            }
            
            clearResults() {
                // Remove all patch layers
                this.patches.forEach(patch => {
                    if (patch.mapElement) {
                        this.map.removeLayer(patch.mapElement);
                    }
                });
                
                this.patches.clear();
                document.getElementById('patchGrid').style.display = 'none';
                
                // Reset status manager statistics
                this.statusManager.updateState({
                    statistics: {
                        totalPatches: 0,
                        positiveDetections: 0,
                        highConfidenceDetections: 0,
                        averageConfidence: 0,
                        scanStartTime: null,
                        lastUpdateTime: null
                    }
                });
            }
            
            refreshPatchColors() {
                this.patches.forEach(patch => {
                    if (patch.mapElement) {
                        const color = this.getPatchColor(patch);
                        patch.mapElement.setStyle({
                            color: color,
                            fillColor: color
                        });
                    }
                });
            }
            
            bindEvents() {
                // Button events are now handled by StatusUIManager
                // Input events
                document.getElementById('centerLat').addEventListener('change', () => this.updateScanArea());
                document.getElementById('centerLon').addEventListener('change', () => this.updateScanArea());
                document.getElementById('scanRadius').addEventListener('change', () => this.updateScanArea());
                
                // Visualization options
                document.getElementById('showConfidence').addEventListener('change', () => {
                    this.refreshPatchColors();
                });
                
                // Kernel management buttons
                document.getElementById('listKernelsBtn').addEventListener('click', () => {
                    this.handleListKernels();
                });
                
                document.getElementById('forceRetrainBtn').addEventListener('click', () => {
                    this.handleForceRetrain();
                });
                
                document.getElementById('clearKernelsBtn').addEventListener('click', () => {
                    this.handleClearKernels();
                });
                
                // Hide patch grid when clicking elsewhere
                document.addEventListener('click', (e) => {
                    if (!e.target.closest('.patch-grid') && !e.target.closest('.leaflet-interactive')) {
                        document.getElementById('patchGrid').style.display = 'none';
                    }
                });
            }
            
            /**
             * Handle list kernels button click
             */
            async handleListKernels() {
                const kernelInfoEl = document.getElementById('kernelInfo');
                const btn = document.getElementById('listKernelsBtn');
                
                try {
                    btn.disabled = true;
                    btn.textContent = 'Loading...';
                    
                    const kernels = await this.statusManager.listKernels();
                    
                    if (kernels.length === 0) {
                        kernelInfoEl.innerHTML = '<div>📭 No cached kernels found</div>';
                    } else {
                        kernelInfoEl.innerHTML = kernels.map(kernel => `
                            <div style="margin: 4px 0; padding: 4px; background: #333; border-radius: 3px;">
                                <div>🏗️ ${kernel.structure_type}</div>
                                <div>📦 ${kernel.hash.substring(0, 12)}...</div>
                                <div>📅 ${new Date(kernel.created_at).toLocaleDateString()}</div>
                            </div>
                        `).join('');
                    }
                    
                    kernelInfoEl.style.display = 'block';
                    
                } catch (error) {
                    console.error('Failed to list kernels:', error);
                    kernelInfoEl.innerHTML = '<div style="color: #ff4444;">❌ Failed to list kernels</div>';
                    kernelInfoEl.style.display = 'block';
                } finally {
                    btn.disabled = false;
                    btn.innerHTML = '<i class="material-icons" style="font-size: 14px; margin-right: 4px;">storage</i>List Cached Kernels';
                }
            }
            
            /**
             * Handle force retrain button click
             */
            async handleForceRetrain() {
                const kernelInfoEl = document.getElementById('kernelInfo');
                const btn = document.getElementById('forceRetrainBtn');
                
                if (!confirm('This will force retraining of kernels on the next discovery session. Are you sure?')) {
                    return;
                }
                
                try {
                    btn.disabled = true;
                    btn.textContent = 'Setting...';
                    
                    await this.statusManager.forceRetrain();
                    
                    kernelInfoEl.innerHTML = '<div style="color: #00ff88;">✅ Force retrain flag set. Next scan will retrain kernels.</div>';
                    kernelInfoEl.style.display = 'block';
                    
                    // Update kernel status
                    document.getElementById('kernelStatus').textContent = 'Will retrain';
                    document.getElementById('kernelStatus').style.color = '#ffaa00';
                    
                } catch (error) {
                    console.error('Failed to set force retrain:', error);
                    kernelInfoEl.innerHTML = '<div style="color: #ff4444;">❌ Failed to set force retrain</div>';
                    kernelInfoEl.style.display = 'block';
                } finally {
                    btn.disabled = false;
                    btn.innerHTML = '<i class="material-icons" style="font-size: 14px; margin-right: 4px;">refresh</i>Force Retrain';
                }
            }
            
            /**
             * Handle clear kernels button click
             */
            async handleClearKernels() {
                const kernelInfoEl = document.getElementById('kernelInfo');
                const btn = document.getElementById('clearKernelsBtn');
                
                if (!confirm('This will permanently delete all cached kernels. Are you sure?')) {
                    return;
                }
                
                try {
                    btn.disabled = true;
                    btn.textContent = 'Clearing...';
                    
                    const result = await this.statusManager.clearKernels(true);
                    
                    kernelInfoEl.innerHTML = `<div style="color: #00ff88;">✅ ${result.message}</div>`;
                    kernelInfoEl.style.display = 'block';
                    
                    // Update kernel status
                    document.getElementById('kernelStatus').textContent = 'Cache cleared';
                    document.getElementById('kernelStatus').style.color = '#999';
                    
                } catch (error) {
                    console.error('Failed to clear kernels:', error);
                    kernelInfoEl.innerHTML = '<div style="color: #ff4444;">❌ Failed to clear kernels</div>';
                    kernelInfoEl.style.display = 'block';
                } finally {
                    btn.disabled = false;
                    btn.innerHTML = '<i class="material-icons" style="font-size: 14px; margin-right: 4px;">delete</i>Clear Cache';
                }
            }
        }
        
        // Initialize the application when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            window.discoveryApp = new WindmillDiscoveryApp();
        });
    </script>
</body>
